**对基本的几种网络模型进行实践，学习服务器编程的核心设计问题。
参见文章：http://www.cricode.com/3510.html  
          http://kb.cnblogs.com/page/173038/

**类比理解：可以用医院看病的方式来理解
1、第一种同步阻塞方式，好比小门诊，所有病人排队，一个病人看完，
接着看下一个病人。
2、二三的多进程和多线程就好比大点的医院，所有病人排队，然后挂号。
挂完号之后就各自去不同的医生哪里看病。每个医生相当于进程和线程。
3、io多路复用select+poll

**
主要是解决：connect到send之间有IO阻塞等待，服务器端建立链接、但迟迟没有数据。
**对不同模型的选取，会涉及具体应用采用的长短连接问题，关于长连接和短链接：
  http://www.cnblogs.com/liuyong/archive/2011/07/01/2095487.html
  通俗讲：短链接就是进行一次请求和响应的读写，然后就关闭链接。长链接就是持续进行client与
  server之间的读写交互，直到一方关闭为止。在长链接中，服务端需要采取保活以及定期清理等策略
  来保持server端的稳定性。
 对于短链接，不会涉及send时发生阻塞的问题，模型主要是解决链接建立和数据到达之间的网络传输延时。 


*********延伸
**长短链接的使用场景：
1、长连接：长连接多用于操作频繁，点对点的通讯，而且连接数不能太多的情况。
每个TCP连接的建立都需要三次握手，每个TCP连接的断开要四次握手。
如果每次操作都要建立连接然后再操作的话处理速度会降低，所以每次操作后，
下次操作时直接发送数据就可以了，不用再建立TCP连接。例如：数据库的连接
用长连接，如果用短连接频繁的通信会造成socket错误，频繁的socket创建也是
对资源的浪费。
2、短连接：web网站的http服务一般都用短连接。因为长连接对于服务器来说要
耗费一定的资源。像web网站这么频繁的成千上万甚至上亿客户端的连接用短连接
更省一些资源。试想如果都用长连接，而且同时用成千上万的用户，每个用户都占
有一个连接的话，可想而知服务器的压力有多大。所以并发量大，但是每个用户又
不需频繁操作的情况下需要短连接。总之：长连接和短连接的选择要根据需求而定。
